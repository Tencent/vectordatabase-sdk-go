// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: olama.proto

package olama

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchEngineClient is the client API for SearchEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchEngineClient interface {
	// 修改别名指向
	SetAlias(ctx context.Context, in *AddAliasRequest, opts ...grpc.CallOption) (*UpdateAliasResponse, error)
	// 查询别名指向
	GetAlias(ctx context.Context, in *GetAliasRequest, opts ...grpc.CallOption) (*GetAliasResponse, error)
	// 删除别名指向
	DeleteAlias(ctx context.Context, in *RemoveAliasRequest, opts ...grpc.CallOption) (*UpdateAliasResponse, error)
	// 创建索引
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	// 删除索引
	DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*DropCollectionResponse, error)
	// 清空索引
	TruncateCollection(ctx context.Context, in *TruncateCollectionRequest, opts ...grpc.CallOption) (*TruncateCollectionResponse, error)
	// 显示索引配置
	DescribeCollection(ctx context.Context, in *DescribeCollectionRequest, opts ...grpc.CallOption) (*DescribeCollectionResponse, error)
	// 显示全部索引
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	// 重建索引
	RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*RebuildIndexResponse, error)
	// 写入向量
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error)
	// 更新向量
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// 查询向量
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// KNN搜索
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// 混合搜索
	HybridSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// 关键词检索
	FullTextSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// 删除向量
	Dele(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// count
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// 创建 database
	CreateDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error)
	// 删除 database
	DropDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error)
	// 显示全部 database
	ListDatabases(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error)
	// RBAC相关接口
	// 创建用户
	UserCreate(ctx context.Context, in *UserAccountRequest, opts ...grpc.CallOption) (*UserAccountResponse, error)
	// 删除用户
	UserDrop(ctx context.Context, in *UserAccountRequest, opts ...grpc.CallOption) (*UserAccountResponse, error)
	// 修改用户密码
	UserChangePassword(ctx context.Context, in *UserAccountRequest, opts ...grpc.CallOption) (*UserAccountResponse, error)
	// 授予用户角色或权限
	UserGrant(ctx context.Context, in *UserPrivilegesRequest, opts ...grpc.CallOption) (*UserPrivilegesResponse, error)
	// 撤销用户角色或权限
	UserRevoke(ctx context.Context, in *UserPrivilegesRequest, opts ...grpc.CallOption) (*UserPrivilegesResponse, error)
	// 展示所有用户列表
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	// 展示某个用户的详细信息
	UserDescribe(ctx context.Context, in *UserDescribeRequest, opts ...grpc.CallOption) (*UserDescribeResponse, error)
	// 获取版本（api升级兼容性考虑）
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// 新增scalar的索引
	AddIndex(ctx context.Context, in *AddIndexRequest, opts ...grpc.CallOption) (*AddIndexResponse, error)
	// 删除scalar的索引
	DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*DropIndexResponse, error)
	// 修改index配置
	ModifyVectorIndex(ctx context.Context, in *ModifyVectorIndexRequest, opts ...grpc.CallOption) (*ModifyVectorIndexResponse, error)
}

type searchEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchEngineClient(cc grpc.ClientConnInterface) SearchEngineClient {
	return &searchEngineClient{cc}
}

func (c *searchEngineClient) SetAlias(ctx context.Context, in *AddAliasRequest, opts ...grpc.CallOption) (*UpdateAliasResponse, error) {
	out := new(UpdateAliasResponse)
	err := c.cc.Invoke(ctx, "/alias/set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) GetAlias(ctx context.Context, in *GetAliasRequest, opts ...grpc.CallOption) (*GetAliasResponse, error) {
	out := new(GetAliasResponse)
	err := c.cc.Invoke(ctx, "/alias/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) DeleteAlias(ctx context.Context, in *RemoveAliasRequest, opts ...grpc.CallOption) (*UpdateAliasResponse, error) {
	out := new(UpdateAliasResponse)
	err := c.cc.Invoke(ctx, "/alias/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, "/collection/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*DropCollectionResponse, error) {
	out := new(DropCollectionResponse)
	err := c.cc.Invoke(ctx, "/collection/drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) TruncateCollection(ctx context.Context, in *TruncateCollectionRequest, opts ...grpc.CallOption) (*TruncateCollectionResponse, error) {
	out := new(TruncateCollectionResponse)
	err := c.cc.Invoke(ctx, "/collection/truncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) DescribeCollection(ctx context.Context, in *DescribeCollectionRequest, opts ...grpc.CallOption) (*DescribeCollectionResponse, error) {
	out := new(DescribeCollectionResponse)
	err := c.cc.Invoke(ctx, "/collection/describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/collection/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*RebuildIndexResponse, error) {
	out := new(RebuildIndexResponse)
	err := c.cc.Invoke(ctx, "/index/rebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*UpsertResponse, error) {
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, "/document/upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/document/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/document/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/document/search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) HybridSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/document/hybridSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) FullTextSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/full_text_search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) Dele(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/document/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/document/count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) CreateDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error) {
	out := new(DatabaseResponse)
	err := c.cc.Invoke(ctx, "/database/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) DropDatabase(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error) {
	out := new(DatabaseResponse)
	err := c.cc.Invoke(ctx, "/database/drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) ListDatabases(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error) {
	out := new(DatabaseResponse)
	err := c.cc.Invoke(ctx, "/database/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) UserCreate(ctx context.Context, in *UserAccountRequest, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	out := new(UserAccountResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/user_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) UserDrop(ctx context.Context, in *UserAccountRequest, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	out := new(UserAccountResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/user_drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) UserChangePassword(ctx context.Context, in *UserAccountRequest, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	out := new(UserAccountResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/user_change_password", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) UserGrant(ctx context.Context, in *UserPrivilegesRequest, opts ...grpc.CallOption) (*UserPrivilegesResponse, error) {
	out := new(UserPrivilegesResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/user_grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) UserRevoke(ctx context.Context, in *UserPrivilegesRequest, opts ...grpc.CallOption) (*UserPrivilegesResponse, error) {
	out := new(UserPrivilegesResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/user_revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/user_list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) UserDescribe(ctx context.Context, in *UserDescribeRequest, opts ...grpc.CallOption) (*UserDescribeResponse, error) {
	out := new(UserDescribeResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/user_describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/SearchEngine/get_version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) AddIndex(ctx context.Context, in *AddIndexRequest, opts ...grpc.CallOption) (*AddIndexResponse, error) {
	out := new(AddIndexResponse)
	err := c.cc.Invoke(ctx, "/index/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*DropIndexResponse, error) {
	out := new(DropIndexResponse)
	err := c.cc.Invoke(ctx, "/olama.SearchEngine/dropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) ModifyVectorIndex(ctx context.Context, in *ModifyVectorIndexRequest, opts ...grpc.CallOption) (*ModifyVectorIndexResponse, error) {
	out := new(ModifyVectorIndexResponse)
	err := c.cc.Invoke(ctx, "/index/modifyVectorIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchEngineServer is the server API for SearchEngine service.
// All implementations must embed UnimplementedSearchEngineServer
// for forward compatibility
type SearchEngineServer interface {
	// 修改别名指向
	SetAlias(context.Context, *AddAliasRequest) (*UpdateAliasResponse, error)
	// 查询别名指向
	GetAlias(context.Context, *GetAliasRequest) (*GetAliasResponse, error)
	// 删除别名指向
	DeleteAlias(context.Context, *RemoveAliasRequest) (*UpdateAliasResponse, error)
	// 创建索引
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	// 删除索引
	DropCollection(context.Context, *DropCollectionRequest) (*DropCollectionResponse, error)
	// 清空索引
	TruncateCollection(context.Context, *TruncateCollectionRequest) (*TruncateCollectionResponse, error)
	// 显示索引配置
	DescribeCollection(context.Context, *DescribeCollectionRequest) (*DescribeCollectionResponse, error)
	// 显示全部索引
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	// 重建索引
	RebuildIndex(context.Context, *RebuildIndexRequest) (*RebuildIndexResponse, error)
	// 写入向量
	Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error)
	// 更新向量
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// 查询向量
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// KNN搜索
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// 混合搜索
	HybridSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	// 关键词检索
	FullTextSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	// 删除向量
	Dele(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// count
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// 创建 database
	CreateDatabase(context.Context, *DatabaseRequest) (*DatabaseResponse, error)
	// 删除 database
	DropDatabase(context.Context, *DatabaseRequest) (*DatabaseResponse, error)
	// 显示全部 database
	ListDatabases(context.Context, *DatabaseRequest) (*DatabaseResponse, error)
	// RBAC相关接口
	// 创建用户
	UserCreate(context.Context, *UserAccountRequest) (*UserAccountResponse, error)
	// 删除用户
	UserDrop(context.Context, *UserAccountRequest) (*UserAccountResponse, error)
	// 修改用户密码
	UserChangePassword(context.Context, *UserAccountRequest) (*UserAccountResponse, error)
	// 授予用户角色或权限
	UserGrant(context.Context, *UserPrivilegesRequest) (*UserPrivilegesResponse, error)
	// 撤销用户角色或权限
	UserRevoke(context.Context, *UserPrivilegesRequest) (*UserPrivilegesResponse, error)
	// 展示所有用户列表
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	// 展示某个用户的详细信息
	UserDescribe(context.Context, *UserDescribeRequest) (*UserDescribeResponse, error)
	// 获取版本（api升级兼容性考虑）
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// 新增scalar的索引
	AddIndex(context.Context, *AddIndexRequest) (*AddIndexResponse, error)
	// 删除scalar的索引
	DropIndex(context.Context, *DropIndexRequest) (*DropIndexResponse, error)
	// 修改index配置
	ModifyVectorIndex(context.Context, *ModifyVectorIndexRequest) (*ModifyVectorIndexResponse, error)
	mustEmbedUnimplementedSearchEngineServer()
}

// UnimplementedSearchEngineServer must be embedded to have forward compatible implementations.
type UnimplementedSearchEngineServer struct {
}

func (UnimplementedSearchEngineServer) SetAlias(context.Context, *AddAliasRequest) (*UpdateAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAlias not implemented")
}
func (UnimplementedSearchEngineServer) GetAlias(context.Context, *GetAliasRequest) (*GetAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlias not implemented")
}
func (UnimplementedSearchEngineServer) DeleteAlias(context.Context, *RemoveAliasRequest) (*UpdateAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlias not implemented")
}
func (UnimplementedSearchEngineServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedSearchEngineServer) DropCollection(context.Context, *DropCollectionRequest) (*DropCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedSearchEngineServer) TruncateCollection(context.Context, *TruncateCollectionRequest) (*TruncateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateCollection not implemented")
}
func (UnimplementedSearchEngineServer) DescribeCollection(context.Context, *DescribeCollectionRequest) (*DescribeCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (UnimplementedSearchEngineServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedSearchEngineServer) RebuildIndex(context.Context, *RebuildIndexRequest) (*RebuildIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildIndex not implemented")
}
func (UnimplementedSearchEngineServer) Upsert(context.Context, *UpsertRequest) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedSearchEngineServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSearchEngineServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedSearchEngineServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchEngineServer) HybridSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (UnimplementedSearchEngineServer) FullTextSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullTextSearch not implemented")
}
func (UnimplementedSearchEngineServer) Dele(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dele not implemented")
}
func (UnimplementedSearchEngineServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedSearchEngineServer) CreateDatabase(context.Context, *DatabaseRequest) (*DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedSearchEngineServer) DropDatabase(context.Context, *DatabaseRequest) (*DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedSearchEngineServer) ListDatabases(context.Context, *DatabaseRequest) (*DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedSearchEngineServer) UserCreate(context.Context, *UserAccountRequest) (*UserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedSearchEngineServer) UserDrop(context.Context, *UserAccountRequest) (*UserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDrop not implemented")
}
func (UnimplementedSearchEngineServer) UserChangePassword(context.Context, *UserAccountRequest) (*UserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePassword not implemented")
}
func (UnimplementedSearchEngineServer) UserGrant(context.Context, *UserPrivilegesRequest) (*UserPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGrant not implemented")
}
func (UnimplementedSearchEngineServer) UserRevoke(context.Context, *UserPrivilegesRequest) (*UserPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRevoke not implemented")
}
func (UnimplementedSearchEngineServer) UserList(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedSearchEngineServer) UserDescribe(context.Context, *UserDescribeRequest) (*UserDescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDescribe not implemented")
}
func (UnimplementedSearchEngineServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedSearchEngineServer) AddIndex(context.Context, *AddIndexRequest) (*AddIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIndex not implemented")
}
func (UnimplementedSearchEngineServer) DropIndex(context.Context, *DropIndexRequest) (*DropIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedSearchEngineServer) ModifyVectorIndex(context.Context, *ModifyVectorIndexRequest) (*ModifyVectorIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyVectorIndex not implemented")
}
func (UnimplementedSearchEngineServer) mustEmbedUnimplementedSearchEngineServer() {}

// UnsafeSearchEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchEngineServer will
// result in compilation errors.
type UnsafeSearchEngineServer interface {
	mustEmbedUnimplementedSearchEngineServer()
}

func RegisterSearchEngineServer(s grpc.ServiceRegistrar, srv SearchEngineServer) {
	s.RegisterService(&SearchEngine_ServiceDesc, srv)
}

func _SearchEngine_SetAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).SetAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/setAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).SetAlias(ctx, req.(*AddAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_GetAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).GetAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/getAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).GetAlias(ctx, req.(*GetAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_DeleteAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).DeleteAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/deleteAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).DeleteAlias(ctx, req.(*RemoveAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/createCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/dropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).DropCollection(ctx, req.(*DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_TruncateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).TruncateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/truncateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).TruncateCollection(ctx, req.(*TruncateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/describeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).DescribeCollection(ctx, req.(*DescribeCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/listCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_RebuildIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).RebuildIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/rebuildIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).RebuildIndex(ctx, req.(*RebuildIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/hybrid_search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).HybridSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_FullTextSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).FullTextSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/full_text_search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).FullTextSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_Dele_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).Dele(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/dele",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).Dele(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/createDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).CreateDatabase(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/dropDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).DropDatabase(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/listDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).ListDatabases(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/user_create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).UserCreate(ctx, req.(*UserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_UserDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).UserDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/user_drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).UserDrop(ctx, req.(*UserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_UserChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).UserChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/user_change_password",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).UserChangePassword(ctx, req.(*UserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_UserGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrivilegesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).UserGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/user_grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).UserGrant(ctx, req.(*UserPrivilegesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_UserRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrivilegesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).UserRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/user_revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).UserRevoke(ctx, req.(*UserPrivilegesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/user_list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_UserDescribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).UserDescribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/user_describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).UserDescribe(ctx, req.(*UserDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/get_version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_AddIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).AddIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/addIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).AddIndex(ctx, req.(*AddIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/dropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).DropIndex(ctx, req.(*DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_ModifyVectorIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyVectorIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).ModifyVectorIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olama.SearchEngine/modifyVectorIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).ModifyVectorIndex(ctx, req.(*ModifyVectorIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchEngine_ServiceDesc is the grpc.ServiceDesc for SearchEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olama.SearchEngine",
	HandlerType: (*SearchEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setAlias",
			Handler:    _SearchEngine_SetAlias_Handler,
		},
		{
			MethodName: "getAlias",
			Handler:    _SearchEngine_GetAlias_Handler,
		},
		{
			MethodName: "deleteAlias",
			Handler:    _SearchEngine_DeleteAlias_Handler,
		},
		{
			MethodName: "createCollection",
			Handler:    _SearchEngine_CreateCollection_Handler,
		},
		{
			MethodName: "dropCollection",
			Handler:    _SearchEngine_DropCollection_Handler,
		},
		{
			MethodName: "truncateCollection",
			Handler:    _SearchEngine_TruncateCollection_Handler,
		},
		{
			MethodName: "describeCollection",
			Handler:    _SearchEngine_DescribeCollection_Handler,
		},
		{
			MethodName: "listCollections",
			Handler:    _SearchEngine_ListCollections_Handler,
		},
		{
			MethodName: "rebuildIndex",
			Handler:    _SearchEngine_RebuildIndex_Handler,
		},
		{
			MethodName: "upsert",
			Handler:    _SearchEngine_Upsert_Handler,
		},
		{
			MethodName: "update",
			Handler:    _SearchEngine_Update_Handler,
		},
		{
			MethodName: "query",
			Handler:    _SearchEngine_Query_Handler,
		},
		{
			MethodName: "search",
			Handler:    _SearchEngine_Search_Handler,
		},
		{
			MethodName: "hybrid_search",
			Handler:    _SearchEngine_HybridSearch_Handler,
		},
		{
			MethodName: "full_text_search",
			Handler:    _SearchEngine_FullTextSearch_Handler,
		},
		{
			MethodName: "dele",
			Handler:    _SearchEngine_Dele_Handler,
		},
		{
			MethodName: "count",
			Handler:    _SearchEngine_Count_Handler,
		},
		{
			MethodName: "createDatabase",
			Handler:    _SearchEngine_CreateDatabase_Handler,
		},
		{
			MethodName: "dropDatabase",
			Handler:    _SearchEngine_DropDatabase_Handler,
		},
		{
			MethodName: "listDatabases",
			Handler:    _SearchEngine_ListDatabases_Handler,
		},
		{
			MethodName: "user_create",
			Handler:    _SearchEngine_UserCreate_Handler,
		},
		{
			MethodName: "user_drop",
			Handler:    _SearchEngine_UserDrop_Handler,
		},
		{
			MethodName: "user_change_password",
			Handler:    _SearchEngine_UserChangePassword_Handler,
		},
		{
			MethodName: "user_grant",
			Handler:    _SearchEngine_UserGrant_Handler,
		},
		{
			MethodName: "user_revoke",
			Handler:    _SearchEngine_UserRevoke_Handler,
		},
		{
			MethodName: "user_list",
			Handler:    _SearchEngine_UserList_Handler,
		},
		{
			MethodName: "user_describe",
			Handler:    _SearchEngine_UserDescribe_Handler,
		},
		{
			MethodName: "get_version",
			Handler:    _SearchEngine_GetVersion_Handler,
		},
		{
			MethodName: "addIndex",
			Handler:    _SearchEngine_AddIndex_Handler,
		},
		{
			MethodName: "dropIndex",
			Handler:    _SearchEngine_DropIndex_Handler,
		},
		{
			MethodName: "modifyVectorIndex",
			Handler:    _SearchEngine_ModifyVectorIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "olama.proto",
}
